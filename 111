#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

// Определяем класс Trie (бор)
class Trie {
public:
    // Конструктор
    Trie() {
        root_ = new TrieNode();
    }

    // Функция для добавления слова в бор
    void insert(string word) {
        TrieNode* node = root_;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
        }
        node->is_word = true;
    }

    // Функция для проверки, есть ли слово в боре
    bool search(string word) {
        TrieNode* node = root_;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                return false;
            }
            node = node->children[c];
        }
        return node->is_word;
    }

    // Функция для проверки, есть ли слова в боре, начинающиеся с заданного префикса
    bool startsWith(string prefix) {
        TrieNode* node = root_;
        for (char c : prefix) {
            if (node->children.find(c) == node->children.end()) {
                return false;
            }
            node = node->children[c];
        }
        return true;
    }

private:
    // Определяем структуру TrieNode (узел бора)
    struct TrieNode {
        unordered_map<char, TrieNode*> children;
        bool is_word;

        // Конструктор
        TrieNode() {
            is_word = false;
        }
    };

    TrieNode* root_;
};

// Функция для выполнения автодополнения слов по заданному префиксу в боре
vector<string> autocomplete(Trie& trie, string prefix) {
    vector<string> results;
    Trie::TrieNode* node = trie.root_;
    for (char c : prefix) {
        if (node->children.find(c) == node->children.end()) {
            return results;
        }
        node = node->children[c];
    }
    autocomplete_helper(node, prefix, results);
    return results;
}

// Вспомогательная рекурсивная функция для выполнения автодополнения слов по заданному префиксу в боре
void autocomplete_helper(Trie::TrieNode* node, string current_word, vector<string>& results) {
    if (node->is_word) {
        results.push_back(current_word);
    }
    for (const auto& [c, child_node] : node->children) {
        autocomplete_helper(child_node, current_word + c, results);
    }
}

int main() {
    // Создаем экземпляр бора
    Trie trie;

    // Задаем словарь
    vector<string> dictionary = {"apple", "application", "banana", "bandit", "book"};

    // Добавляем слова в бор
    for (string word : dictionary) {
        trie.insert(word);
    }

    // Выполняем автодополнение слов по заданному префиксу
    string prefix = "app";
    vector<string> results = autocomplete(trie, prefix);

    // Выводим результаты
    cout << "Список слов, начинающихся с \"" << prefix << "\":" << endl;
    for (string word : results) {
        cout << "- " << word << endl;
    }

    return 0;
}
